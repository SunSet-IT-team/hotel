name: SSH Deploy

on:
    push:
        branches: [main, dev]
    workflow_dispatch: {}

permissions:
    contents: read

concurrency:
    group: deploy-${{ github.ref }}
    cancel-in-progress: true

jobs:
    deploy:
        runs-on: ubuntu-latest
        timeout-minutes: 60

        steps:
            - name: Decide target (dir/project/services)
              id: cfg
              shell: bash
              run: |
                  set -e
                  BRANCH="${GITHUB_REF_NAME:-${GITHUB_REF##*/}}"
                  if [ "$BRANCH" = "main" ]; then
                    echo "DIR=hotel"              >> "$GITHUB_OUTPUT"
                    echo "PROJECT=hotel"          >> "$GITHUB_OUTPUT"
                    echo "SERVICES=app-prod"      >> "$GITHUB_OUTPUT"
                    echo "ENV_FILE=.env"          >> "$GITHUB_OUTPUT"
                    echo "PORTS=8080"             >> "$GITHUB_OUTPUT"
                  else
                    echo "DIR=hotel-dev"          >> "$GITHUB_OUTPUT"
                    echo "PROJECT=hotel-dev"      >> "$GITHUB_OUTPUT"
                    echo "SERVICES=app storybook" >> "$GITHUB_OUTPUT"
                    echo "ENV_FILE=.env.dev"      >> "$GITHUB_OUTPUT"
                    echo "PORTS=3000 6006"        >> "$GITHUB_OUTPUT"
                  fi

            - name: Precheck secrets
              env:
                  SSH_HOST: ${{ secrets.SERVER_HOST }}
                  SSH_USER: ${{ secrets.SERVER_USER }}
                  SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
              run: |
                  set -e
                  [ -n "$SSH_HOST" ] || { echo "Missing SERVER_HOST secret"; exit 1; }
                  [ -n "$SSH_USER" ] || { echo "Missing SERVER_USER secret"; exit 1; }
                  [ -n "$SSH_KEY"  ] || { echo "Missing SERVER_SSH_KEY secret"; exit 1; }

            - name: Deploy over SSH
              uses: appleboy/ssh-action@v1.2.0
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  port: 22
                  debug: true
                  command_timeout: 45m
                  script: |
                      set -Eeuo pipefail

                      BRANCH="${{ github.ref_name }}"
                      DIR="${{ steps.cfg.outputs.DIR }}"
                      PROJECT="${{ steps.cfg.outputs.PROJECT }}"
                      SERVICES="${{ steps.cfg.outputs.SERVICES }}"
                      ENV_FILE="${{ steps.cfg.outputs.ENV_FILE }}"
                      PORTS="${{ steps.cfg.outputs.PORTS }}"

                      echo "::group::Preflight"
                      echo "Branch:   $BRANCH"
                      echo "Dir:      $HOME/$DIR"
                      echo "Project:  $PROJECT"
                      echo "Services: $SERVICES"
                      echo "Env file: $ENV_FILE"
                      echo "Ports:    $PORTS"
                      test -d "$HOME/$DIR" || { echo "ERROR: $HOME/$DIR not found"; exit 1; }
                      cd "$HOME/$DIR"
                      test -f "$ENV_FILE" || { echo "ERROR: $ENV_FILE not found in $PWD"; exit 1; }
                      echo "::endgroup::"

                      echo "::group::Git sync"
                      git fetch --all --prune
                      git reset --hard "origin/$BRANCH"
                      git clean -fd -e .env -e .env.dev
                      echo "HEAD: $(git rev-parse --short HEAD)"
                      echo "::endgroup::"

                      echo "::group::Free occupied ports"
                      for P in $PORTS; do
                        CID=$(docker ps --filter "publish=$P" --format '{{.ID}}' | xargs -r echo)
                        if [ -n "$CID" ]; then
                          echo "Stopping container(s) using port $P: $CID"
                          docker stop $CID || true
                          docker rm -f $CID || true
                        fi
                      done
                      echo "::endgroup::"

                      echo "::group::Cleanup old project resources"
                      # Удаляем ВСЕ ресурсы проекта (контейнеры, сети, volumes)
                      docker compose -p "$PROJECT" down --volumes --rmi local --remove-orphans || true

                      # Дополнительная очистка: удаляем образы с тегом проекта
                      docker images --filter "reference=*$PROJECT*" -q | xargs -r docker rmi -f || true

                      # Очищаем dangling images и volumes
                      docker image prune -af
                      docker volume prune -f
                      echo "::endgroup::"

                      echo "::group::Build without cache"
                      # Сборка без кэша для чистого состояния
                      docker compose -p "$PROJECT" build --no-cache --pull
                      echo "::endgroup::"

                      echo "::group::Start services"
                      docker compose -p "$PROJECT" up -d --remove-orphans --force-recreate $SERVICES
                      sleep 5
                      docker compose -p "$PROJECT" ps
                      echo "::endgroup::"

                      echo "::group::Final cleanup"
                      docker system prune -af
                      echo "::endgroup::"
